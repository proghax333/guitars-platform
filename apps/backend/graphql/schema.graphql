type AuthProvider {
  providerId: String!
  provider: String!
  email: String!
  accessToken: String
}

type Profile {
  _id: ObjectId!
  user: User
  name: String!
  avatar: String
  bio: String
  settings: Object
}

type User {
  _id: ObjectId!
  username: String!
  email: String!
  providers: [AuthProvider!]!
  profiles: [Profile!]!
  createdAt: Date!
  updatedAt: Date!
}

type GreetingMessage {
  id: Int!
  text: String!
}

type Greeting {
  message: GreetingMessage!
}

type Image {
  id: String!
  url: String!
}

type Product {
  _id: ObjectId!
  name: String!
  description: String!
  images: [Image]!
  sku: String
  features: [Object]!
  price: String!

  variants: [ProductVariant!]
  productPostings: [ProductPosting!]
}

type ProductVariant {
  _id: ObjectId!
  product: Product
  name: String
  description: String
  type: String
  images: [Image]
  sku: String
  features: [Object]
  price: String
}

type ProductPosting {
  _id: ObjectId!
  variant: ProductVariant
  seller: Profile
  price: String!
}

###
# Queries: All GraphQL queries.
###

type Query {
  hello: String!

  message: GreetingMessage!
  greeting(name: String!): Greeting!

  profile(id: ObjectId!): Profile
}

input LoginMutationInput {
  username: String!
  password: String!
}

type LoginMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  user: User
  accessToken: String
  refreshToken: String
}

input SignupMutationInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

type SignupMutationResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  user: User
}

input ImageInput {
  id: String!
  url: String!
}

input CreateProductInput_variants {
  name: String
  description: String
  type: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String
}

input CreateProductInput {
  name: String!
  description: String!
  images: [ImageInput]!
  sku: String
  features: [Object]!
  price: String!

  variants: [CreateProductInput_variants!]
}

type CreateProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  product: Product
}

input UpdateProductVariantInput {
  _id: ObjectId
  name: String
  description: String
  type: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String
}

input UpdateProductInput {
  name: String
  description: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String

  variants: [UpdateProductVariantInput!]
}

type UpdateProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  product: Product
}

type DeleteProductResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

input UpdateProductVariantInput {
  name: String
  description: String
  type: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String
}

input CreateProductPostingInput {
  variant: ObjectId!
  seller: ObjectId!
  price: String!
}

type CreateProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String!
  errors: [String!]

  productPosting: ProductPosting
}

input CreateProductVariantInput {
  product: ObjectId!
  name: String
  description: String
  type: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String
}

type CreateProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productVariant: ProductVariant
}

input UpdateProductVariantInput {
  name: String
  description: String
  type: String
  images: [ImageInput]
  sku: String
  features: [Object]
  price: String
}

type UpdateProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productVariant: ProductVariant
}

type DeleteProductVariantResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

input UpdateProductPostingInput {
  variant: ObjectId!
  seller: ObjectId!
  price: String!
}

type UpdateProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]

  productPosting: ProductPosting
}

type DeleteProductPostingResponse {
  code: Int!
  success: Boolean!
  message: String
  errors: [String!]
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationResponse!
  signup(input: SignupMutationInput!): SignupMutationResponse!
  logout: Boolean!
  refreshToken: String

  # Product mutations
  createProduct(input: CreateProductInput!): CreateProductResponse!
  updateProduct(input: UpdateProductInput!): UpdateProductResponse!
  deleteProduct(id: ObjectId!): DeleteProductResponse!

  # Product variant mutations
  createProductVariant(
    input: CreateProductVariantInput!
  ): CreateProductVariantResponse!
  updateProductVariant(
    id: ObjectId!
    input: UpdateProductVariantInput!
  ): UpdateProductVariantResponse!
  deleteProductVariant(id: ObjectId!): DeleteProductVariantResponse!

  # Product posting mutations
  createProductPosting(
    input: CreateProductPostingInput!
  ): CreateProductPostingResponse!
  updateProductPosting(
    id: ObjectId!
    input: UpdateProductPostingInput!
  ): UpdateProductPostingResponse!
  deleteProductPosting(id: ObjectId!): DeleteProductPostingResponse!
}

"""
The specification includes the pagination metadata
in a common type.
"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

scalar Date
scalar Object
scalar JSON
scalar ObjectId
